{"version":3,"sources":["Api/restaurant.js","Pages/Dashboard/action.js","ActionsTypes/restaurant.js","Pages/Dashboard/listItems.js","Pages/Dashboard/dashboard.component.js","Pages/Dashboard/dashboard.services.js","Pages/Dashboard/dashboard.container.js","App.js","serviceWorker.js","Reducers/restaurant.js","Reducers/index.js","store.js","index.js"],"names":["searchRestaurant","query","a","api","axios","get","params","city","per_page","response","data","console","log","fetchRestaurants","restaurants","type","payload","ListItem","props","listItems","Array","from","map","restaurant","key","id","name","address","area","price","Dashboard","useState","setCity","filter","setFilter","setRestaurants","length","className","htmlFor","value","onChange","e","target","filterValue","result","toLowerCase","includes","search","handleFilter","onClick","mapDispatchToProps","dispatch","getState","ReasturantApi","connect","state","App","Boolean","window","location","hostname","match","initialState","action","combineReducers","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1988b5c4.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst api = 'http://opentable.herokuapp.com/api';\r\n\r\nexport const searchRestaurant = async (query) => {\r\n  try {\r\n    const url = api + '/restaurants';\r\n    const response = await axios.get(url, {\r\n      params: {city: query,per_page:100},\r\n    });\r\n    const {data} = response;\r\n    return data;\r\n  } catch (err) {\r\n    console.log('error in searchRestaurant', err);\r\n  }\r\n};","\r\nimport * as ReasturantApi from '../../Api/restaurant';\r\nimport * as ActionTypes from '../../ActionsTypes/restaurant'; \r\n\r\n\r\nconst fetchRestaurants= (restaurants) => ({  \r\n    type : ActionTypes.FETCH_RESTAURANTS,\r\n    payload: restaurants\r\n\r\n})\r\n\r\nexport const searchRestaurant = (city) => async (dispatch, getState) => {\r\n    try {\r\n        const { restaurants } = await ReasturantApi.searchRestaurant(city);\r\n        dispatch(fetchRestaurants(restaurants));\r\n    }\r\n    catch (err) {\r\n        console.log('error in searchRestaurant');\r\n    }\r\n}","export const FETCH_RESTAURANTS = \"FETCH_RESTAURANTS\";","import React,{ Fragment } from 'react';\r\n\r\nfunction ListItem(props) {\r\n  const restaurants = Array.from(props.restaurants); \r\n  const listItems = restaurants.map((restaurant) =>\r\n   <Fragment key={restaurant.id}>\r\n      <dt>{restaurant.name}</dt>\r\n      <dd>{restaurant.address}</dd>\r\n      <dd>{restaurant.area}</dd>\r\n      <dd>${restaurant.price}</dd>\r\n      <br/>\r\n    </Fragment>\r\n   \r\n  );\r\n  return (\r\n      <dl>\r\n          <h3>List View</h3>\r\n      {listItems}\r\n    </dl>        \r\n  \r\n  );\r\n}\r\n\r\nexport default ListItem;\r\n","import React,{useState, Fragment} from 'react';\r\nimport './dashboard.css';\r\nimport ListItem from './listItems';\r\nimport { search } from './dashboard.services';\r\n\r\nfunction Dashboard(props) {\r\n  const [city, setCity] = useState(\"\");\r\n  const [filter,setFilter] = useState(\"\");\r\n  const [restaurants, setRestaurants] = useState([]);\r\n   \r\n  if (props.restaurants !== restaurants && restaurants.length === 0 && filter === \"\") {\r\n        setRestaurants(props.restaurants);\r\n    }\r\n    const handleSubmit = () => {\r\n    props.searchRestaurant(city);\r\n    }\r\n   \r\n  \r\n  const handleFilter = (filterValue) => {\r\n    setFilter(filterValue);\r\n    const result = props.restaurants.filter(restaurant => (\r\n       search(restaurant,filterValue)\r\n    ));\r\n    setRestaurants(result);\r\n    }\r\n  \r\n  return (\r\n    <div className=\"dashboard\">\r\n      <Fragment>\r\n         <label htmlFor=\"cityInput\">\r\n                  City:\r\n        </label>\r\n      <input id=\"cityInput\" type=\"text\" value={city} onChange={(e) => setCity(e.target.value)} />\r\n      </Fragment>\r\n      <Fragment>\r\n <label htmlFor=\"filterInput\">\r\n                  Filter:\r\n        </label>\r\n        <input id=\"filterInput\" type=\"text\" value={filter} onChange={(e) => handleFilter(e.target.value)} />\r\n      </Fragment>\r\n       \r\n      \r\n        <button type=\"submit\" onClick={()=>handleSubmit()} >Submit </button>\r\n        <ListItem restaurants={restaurants} />\r\n    </div>\r\n  );\r\n}\r\nexport default Dashboard;\r\n","export const search = (restaurant, filterValue) => {\r\n   if (restaurant.name.toLowerCase().includes(filterValue) || restaurant.name.includes(filterValue)) {\r\n        return restaurant;\r\n   }\r\n     if (restaurant.address.toLowerCase().includes(filterValue) || restaurant.address.includes(filterValue)) {\r\n        return restaurant;\r\n     }\r\n     if (restaurant.area.toLowerCase().includes(filterValue) || restaurant.area.includes(filterValue)) {\r\n        return restaurant;\r\n      }\r\n  }","import {connect} from 'react-redux';\r\nimport { searchRestaurant } from './action';\r\n\r\nimport Dashboard from './dashboard.component';\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    restaurants:state.restaurant.restaurants\r\n});\r\n  \r\nconst mapDispatchToProps =  {\r\n  searchRestaurant \r\n};\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);","import React from 'react';\r\nimport './App.css';\r\nimport  Dashboard  from './Pages/Dashboard';\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Dashboard />\r\n    </div>\r\n  );\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import * as actionType from '../ActionsTypes/restaurant';\r\n\r\nconst initialState={\r\n    restaurants:[],\r\n};\r\n\r\nconst restaurant = (state = initialState, action) => {\r\n    switch (action.type) {\r\n      case actionType.FETCH_RESTAURANTS:     \r\n      return {\r\n   ...state,\r\n         ...{\r\n           restaurants:action.payload\r\n          }\r\n        };   \r\n\r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n  \r\n  export default restaurant","import { combineReducers } from 'redux'\r\nimport restaurant from './restaurant'\r\n\r\n\r\nexport default combineReducers({\r\n  restaurant\r\n})","import { createStore,applyMiddleware } from 'redux';\r\nimport rootReducer from './Reducers';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst store = createStore(rootReducer,applyMiddleware(thunk));\r\n\r\nexport { store };","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './store';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n    <App />\r\n\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}